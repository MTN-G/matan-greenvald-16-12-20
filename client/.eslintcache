[{"C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\App.tsx":"1","C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\reportWebVitals.ts":"2","C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\styles\\styledComponents.tsx":"3","C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\index.tsx":"4","C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\components\\canvas.tsx":"5","C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\components\\list.tsx":"6","C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\helpers.ts":"7","C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\components\\recieved.tsx":"8"},{"size":2296,"mtime":1608249700895,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1608113966368,"results":"11","hashOfConfig":"10"},{"size":4058,"mtime":1608249659769,"results":"12","hashOfConfig":"10"},{"size":500,"mtime":1608113966368,"results":"13","hashOfConfig":"10"},{"size":1904,"mtime":1608213368626,"results":"14","hashOfConfig":"10"},{"size":8967,"mtime":1608249948551,"results":"15","hashOfConfig":"10"},{"size":284,"mtime":1608249713013,"results":"16","hashOfConfig":"10"},{"size":2686,"mtime":1608249637740,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1mt6d4y",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\App.tsx",[],"C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\reportWebVitals.ts",[],"C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\styles\\styledComponents.tsx",[],"C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\index.tsx",[],["36","37"],"C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\components\\canvas.tsx",[],"C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\components\\list.tsx",["38"],"import React, { useCallback, useEffect, useState } from \"react\";\r\nimport {\r\n  H1,\r\n  StyledDiv,\r\n  StyledUl,\r\n  Wrapper,\r\n  TableHeader,\r\n  StyledSelect,\r\n  StyledForm,\r\n} from \"../styles/styledComponents\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport axios from \"axios\";\r\nimport { Item, Label, Store } from \"../../typescript/interfaces\";\r\nimport { Button, TextField } from \"@material-ui/core\";\r\nimport { convertDateToString } from \"../helpers\";\r\n\r\nconst List: React.FC<{ currency: number }> = ({ currency }) => {\r\n  const [items, setItems] = useState<Item[]>([]);\r\n  const [stores, setStores] = useState<Store[]>([]);\r\n  const [labels, setLabels] = useState<Label[]>([]);\r\n  const [toggleAdd, setToggle] = useState<boolean>(false);\r\n  const [newItem, setNewItem] = useState<Partial<Item>>({});\r\n  const [newStore, setNewStore] = useState<Partial<Store>>();\r\n  const [newLabel, setNewLabel] = useState<Partial<Label>>();\r\n  const [error, setError] = useState<string>(\" \");\r\n  const getItems = useCallback(async () => {\r\n    const data: Item[] = await (await axios.get(\"/api/items/all/waiting\")).data;\r\n    data.map((item: Item) => {\r\n      item.estimatedDate = convertDateToString(item.estimatedDate!);\r\n      return item;\r\n    });\r\n    setItems(data);\r\n  }, []);\r\n\r\n  const getLabels = useCallback(async () => {\r\n    const data: Label[] = (await axios.get(\"/api/labels/all\")).data;\r\n    console.log(data);\r\n\r\n    setLabels(data);\r\n  }, []);\r\n\r\n  const getStores = useCallback(async () => {\r\n    try {\r\n      const data: Store[] = (await axios.get(\"/api/stores/all\")).data;\r\n      console.log(data);\r\n      setStores(data);\r\n    } catch (error) {\r\n      console.trace(error);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    getItems();\r\n    getStores();\r\n    getLabels();\r\n  }, [getItems, getStores, getLabels]);\r\n\r\n  //coming soon \r\n  \r\n  async function addItem(item: Partial<Item>) {\r\n    try {\r\n      if (!item.name) setError(\"item name is required\");\r\n      else if (item!.estimatedDate! <= new Date().getTime())\r\n        setError(\"invalid date\");\r\n      else if (item!.price! <= 1) setError(\"invalid proce\");\r\n      else {\r\n        // await axios.post(\"/api/items\", item);\r\n        setError(\"\");\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <>\r\n      <Wrapper\r\n        padding=\"50px\"\r\n        style={{ display: \"flex\", flexDirection: \"column\", gap: \"20px\" }}\r\n      >\r\n        <H1 color={\"green\"}>What Are We Waiting For?</H1>\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          style={{ maxWidth: \"200px\" }}\r\n          onClick={() => setToggle(true)}\r\n        >\r\n          Add item\r\n        </Button>\r\n        {toggleAdd && (\r\n          <>\r\n            <StyledForm>\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                label=\"Item\"\r\n                onChange={(e) => {\r\n                  const tempItem = newItem;\r\n                  tempItem!.name = e.target.value;\r\n                  setNewItem(tempItem);\r\n                }}\r\n              />\r\n              <TextField\r\n                id=\"standard-basic\"\r\n                type=\"number\"\r\n                label=\"price (USD)\"\r\n                onChange={(e) => {\r\n                  const tempItem = newItem;\r\n                  tempItem!.price = parseInt(e.target.value);\r\n                  setNewItem(tempItem);\r\n                }}\r\n              />\r\n              <TextField\r\n                id=\"date\"\r\n                label=\"Estimated Arriving\"\r\n                type=\"date\"\r\n                defaultValue={new Date()}\r\n                InputLabelProps={{\r\n                  shrink: true,\r\n                }}\r\n                onChange={(e) => {\r\n                  const tempItem = newItem;\r\n                  tempItem!.estimatedDate = new Date(e.target.value).getTime();\r\n                  setNewItem(tempItem);\r\n                }}\r\n              />\r\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <span>select store</span>\r\n                <StyledSelect>\r\n                  {stores.map((store) => (\r\n                    <option>{store.name}</option>\r\n                  ))}\r\n                </StyledSelect>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"new store\"\r\n                  onChange={(e) => {\r\n                    const tempStore = newStore;\r\n                    tempStore!.name = e.target.value;\r\n                    setNewStore(tempStore);\r\n                  }}\r\n                />\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"add link\"\r\n                  onChange={(e) => {\r\n                    const tempStore = newStore;\r\n                    tempStore!.link = e.target.value;\r\n                    setNewStore(tempStore);\r\n                  }}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={() => {\r\n                    getStores();\r\n                  }}\r\n                >\r\n                  save store\r\n                </Button>\r\n              </div>\r\n              <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n                <span>select label</span>\r\n                <StyledSelect>\r\n                  {labels.map((label) => (\r\n                    <option>{label.name}</option>\r\n                  ))}\r\n                </StyledSelect>\r\n                <TextField\r\n                  id=\"standard-basic\"\r\n                  label=\"new label\"\r\n                  onChange={(e) => {\r\n                    const tempLabel = newLabel;\r\n                    tempLabel!.name = e.target.value;\r\n                    setNewStore(tempLabel);\r\n                  }}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={() => {\r\n                    getLabels();\r\n                  }}\r\n                >\r\n                  save label\r\n                </Button>\r\n              </div>\r\n              {error && <div style={{ color: \"red\" }}>{error}</div>}\r\n            </StyledForm>\r\n            <div style={{ display: \"flex\" }}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={async () => {\r\n                  await addItem(newItem);\r\n                  if (error.length < 1) {\r\n                    setToggle(false);\r\n                    getItems();\r\n                  }\r\n                }}\r\n              >\r\n                SAVE ITEM\r\n              </Button>\r\n\r\n              <Button\r\n                onClick={() => setToggle(false)}\r\n                variant=\"contained\"\r\n                color=\"secondary\"\r\n              >\r\n                Cencel\r\n              </Button>\r\n            </div>\r\n          </>\r\n        )}\r\n        <div style={{ display: \"flex\", justifyContent: \"space-between\" }}>\r\n          <StyledUl>\r\n            <TableHeader repeatFormula=\"2fr 2fr 2fr 2fr 0.5fr 0.5fr\">\r\n              <span>Item</span>\r\n              <span>Price</span>\r\n              <span>EST date</span>\r\n              <span>Store</span>\r\n            </TableHeader>\r\n            {items &&\r\n              items.map((item) => (\r\n                <StyledDiv\r\n                  style={{ backgroundColor: \"#c2bfb8\" }}\r\n                  repeatFormula=\"2fr 1fr 1fr 2fr 2fr 0.5fr 0.5fr\"\r\n                >\r\n                  <b>{item.name}</b>\r\n                  <span>{item.price}$</span>\r\n                  <span>{Math.floor(item.price * currency)} ILS</span>\r\n                  <span>{item.estimatedDate}</span>\r\n                  <span>{item.store}</span>\r\n                  <Button variant=\"contained\" color=\"secondary\">\r\n                    EDIT\r\n                  </Button>\r\n                  <Button>\r\n                    <DeleteIcon />\r\n                  </Button>\r\n                </StyledDiv>\r\n              ))}\r\n          </StyledUl>\r\n        </div>\r\n      </Wrapper>\r\n      <Wrapper\r\n        padding=\"50px\"\r\n        style={{ display: \"flex\", flexDirection: \"column\", gap: \"20px\" }}\r\n      >\r\n        <H1 color={\"green\"}>My Stores</H1>\r\n        <StyledUl>\r\n          <TableHeader repeatFormula=\" 3fr 3fr 3fr\">\r\n            <span>Store</span>\r\n            <span>Items From</span>\r\n            <span>Link</span>\r\n          </TableHeader>\r\n\r\n          {stores &&\r\n            stores.map((store: any) => (\r\n              <StyledDiv repeatFormula=\" 3fr 3fr 3fr\">\r\n                <b>{store.name}</b>\r\n                <span>{store.count}</span>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"secondary\"\r\n                  onClick={() => (window.location.href = \"https:\" + store.link)}\r\n                >\r\n                  Website\r\n                </Button>\r\n              </StyledDiv>\r\n            ))}\r\n        </StyledUl>\r\n      </Wrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\helpers.ts",[],"C:\\Users\\mgk27\\OneDrive\\שולחן העבודה\\projects\\matan-greenvald-16-12-20\\client\\src\\components\\recieved.tsx",["39","40","41","42","43"],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":24,"column":20,"nodeType":"50","messageId":"51","endLine":24,"endColumn":31},{"ruleId":"48","severity":1,"message":"52","line":8,"column":3,"nodeType":"50","messageId":"51","endLine":8,"endColumn":15},{"ruleId":"48","severity":1,"message":"53","line":13,"column":18,"nodeType":"50","messageId":"51","endLine":13,"endColumn":27},{"ruleId":"48","severity":1,"message":"54","line":18,"column":10,"nodeType":"50","messageId":"51","endLine":18,"endColumn":16},{"ruleId":"48","severity":1,"message":"55","line":19,"column":10,"nodeType":"50","messageId":"51","endLine":19,"endColumn":16},{"ruleId":"48","severity":1,"message":"56","line":20,"column":18,"nodeType":"50","messageId":"51","endLine":20,"endColumn":27},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"@typescript-eslint/no-unused-vars","'setNewLabel' is assigned a value but never used.","Identifier","unusedVar","'StyledSelect' is defined but never used.","'TextField' is defined but never used.","'stores' is assigned a value but never used.","'labels' is assigned a value but never used.","'setSearch' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]